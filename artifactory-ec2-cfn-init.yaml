AWSTemplateFormatVersion: 2010-09-09
Description: Artifactory ec2

Parameters:
  AMIID:
    Type: String
    Default: ami-0047e3f0f335feeb8
    Description: AMI ID used for initial deployment
  Env:
    AllowedValues:
      - 'Dev'
      - 'QA'
      - 'Prod'
      - 'HZ-SVC'
    Default: 'Dev'
    Description: Environment Type
    Type: String
  DesiredInstanceNumber:
    Type: String
    Default: '1'
    Description: Number of running instances at launch
  DBInstanceID:
    Default: ArtRDS
    Description: RDS
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.

  DBName:
    Default: artdb
    Description: DB
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  DBInstanceClass:
    Default: db.t2.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.

  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB.

Resources:

  ArtifactoryEFS:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      BackupPolicy:
        Status: ENABLED
      PerformanceMode: generalPurpose
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub HA-Artifactory-${Env}-EFS
        - Key: Env
          Value: !Sub ${Env}

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    DependsOn: ArtifactoryEFS
    Properties:
      FileSystemId: !Ref ArtifactoryEFS
      SubnetId:
        Fn::ImportValue: !Sub ${Env}-PrivateSubnetA
      SecurityGroups:
        - Fn::ImportValue: !Sub ${Env}-VPC-SG

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    DependsOn: ArtifactoryEFS
    Properties:
      FileSystemId: !Ref ArtifactoryEFS
      SubnetId:
        Fn::ImportValue: !Sub ${Env}-PrivateSubnetB
      SecurityGroups:
      - Fn::ImportValue: !Sub ${Env}-VPC-SG

  MountTargetResource3:
    Type: AWS::EFS::MountTarget
    DependsOn: ArtifactoryEFS
    Properties:
      FileSystemId: !Ref ArtifactoryEFS
      SubnetId:
        Fn::ImportValue: !Sub ${Env}-PrivateSubnetC
      SecurityGroups:
      - Fn::ImportValue: !Sub ${Env}-VPC-SG

  ArtifactoryLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - LBGroup
      - ArtifactoryEC2InstanceProfile
      - MountTargetResource1
      - MountTargetResource2
      - MountTargetResource3
    Properties:
      LaunchTemplateName: !Sub Artifactory-${Env}-Launch-Template
      LaunchTemplateData:
        InstanceType: t3.medium
        DisableApiTermination: 'true'
        IamInstanceProfile:
          Name: !Ref ArtifactoryEC2InstanceProfile
        ImageId: !Sub ${AMIID}
        SecurityGroupIds:
        - !Ref LBGroup
        - Fn::ImportValue: !Sub ${Env}-VPC-SG
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -ex

            export Env=${Env}
            add-apt-repository universe
            apt-get update -y && apt-get upgrade -y
            mkdir /efs

            export FSID=$(aws efs describe-file-systems | jq '.FileSystems[] | select(.Name == "HA-Artifactory-${Env}-EFS")' | jq '. | .FileSystemId' -r )
            echo $FSID.efs.eu-west-2.amazonaws.com:/ /efs nfs4 defaults,_netdev 0 0 >> /etc/fstab
            mount -a
            #mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport $FSID.efs.eu-west-2.amazonaws.com:/ /efs

            wget -qO - https://api.bintray.com/orgs/jfrog/keys/gpg/public.key | sudo apt-key add -
            echo "deb https://jfrog.bintray.com/artifactory-debs bionic main" | sudo tee /etc/apt/sources.list.d/jfrog.list
            apt-get update -y && apt-get upgrade -y
            sudo apt install jfrog-artifactory-oss
            apt install libmysql-java -y
            cp /usr/share/java/mysql-connector-java-*.*.*.jar /opt/jfrog/artifactory/var/bootstrap/artifactory/tomcat/lib/
            chown artifactory:artifactory /opt/jfrog/artifactory/var/bootstrap/artifactory/tomcat/lib/mysql-connector-java-*.*.*.jar
            chmod 777 /opt/jfrog/artifactory/var/bootstrap/artifactory/tomcat/lib/mysql-connector-java-*.*.*.jar
            #cp -pf /efs/system.yaml /opt/jfrog/artifactory/var/etc/
            #chown artifactory:artifactory /opt/jfrog/artifactory/var/etc/system.yaml
            #chmod 644 /opt/jfrog/artifactory/var/etc/system.yaml
            #sudo systemctl start artifactory.service
            #sudo systemctl enable artifactory.service

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ArtifactoryLaunchTemplate --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ArtifactoryASG --region ${AWS::Region}

    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 30,
                        "totalcpu": false
                      },
                      "disk": {
                        "measurement": [
                          "used_percent",
                          "inodes_free"
                        ],
                        "metrics_collection_interval": 30,
                        "resources": [
                          "*"
                        ]
                      },
                      "diskio": {
                        "measurement": [
                          "io_time"
                        ],
                        "metrics_collection_interval": 30,
                        "resources": [
                          "*"
                        ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 30
                      },
                      "statsd": {
                        "metrics_aggregation_interval": 30,
                        "metrics_collection_interval": 10,
                        "service_address": ":8125"
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ],
                        "metrics_collection_interval": 30
                      }
                    }
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "log_group_name": "/Artifactory-ASG/var/log/cloud-init-output",
                            "file_path": "/var/log/cloud-init-output.log",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "log_group_name": "/Artifactory-ASG/var/log/cfn-init-output",
                            "file_path": "/var/log/cfn-init.log",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "log_group_name": "/Artifactory-ASG/var/log/syslog",
                            "file_path": "/var/log/syslog",
                            "log_stream_name": "{instance_id}"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.ArtifactoryLaunchTemplate.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ArtifactoryLaunchTemplate --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service

  WebGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Artifactory Web Traffic
      GroupName: !Sub Artifactory-${Env}-Web-Traffic-SG
      VpcId:
        Fn::ImportValue: !Sub ${Env}-VPC
      Tags:
        - Key: Name
          Value: !Sub Artifactory-${Env}-Web-Traffic-SG
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LBGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: WebGroup
    Properties:
      GroupDescription: Artifactory Traffic from LB
      GroupName: !Sub Artifactory-${Env}-LB-Traffic-SG
      VpcId:
        Fn::ImportValue: !Sub ${Env}-VPC
      Tags:
        - Key: Name
          Value: !Sub Artifactory-${Env}-LB-Traffic-SG
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref WebGroup
        -
          IpProtocol: tcp
          FromPort: 8082
          ToPort: 8082
          SourceSecurityGroupId: !Ref WebGroup

  ArtifactoryLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref WebGroup
      Subnets:
        - Fn::ImportValue: !Sub ${Env}-PublicSubnetA
        - Fn::ImportValue: !Sub ${Env}-PublicSubnetB
        - Fn::ImportValue: !Sub ${Env}-PublicSubnetC

  ArtifactoryDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: aandsco.people.aws.dev.
      Comment: Zone apex alias targeted to myELB LoadBalancer.
      RecordSets:
        - Name: Artifactory.aandsco.people.aws.dev.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'ArtifactoryLoadBalancer.CanonicalHostedZoneID'
            DNSName: !GetAtt 'ArtifactoryLoadBalancer.DNSName'

  wildcardaandscocomcert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "Artifactory.aandsco.people.aws.dev"
#      SubjectAlternativeNames:
#        - aandsco.people.aws.dev
      DomainValidationOptions:
            - DomainName: "Artifactory.aandsco.people.aws.dev"
              HostedZoneId: Z0713658ROE81WDVO438
      ValidationMethod: DNS

  ArtifactoryLoadBalancerListener80:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref ArtifactoryLoadBalancer
      Port: 80
      Protocol: HTTP

  ArtifactoryLoadBalancerListener443:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ArtifactoryTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ArtifactoryLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref wildcardaandscocomcert

  ArtifactoryEC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${Env}-Artifactory-Instance-Role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  ArtifactoryEC2RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "ArtifactoryEC2${Env}Policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:ListBucket*"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "kms:Decrypt"
              - "kms:Encrypt"
            Resource: "*"
          -
            Effect: "Allow"
            Action: "rds:DescribeDBInstances"
            Resource: "*"
          -
            Effect: "Allow"
            Action: "elasticfilesystem:DescribeFileSystems"
            Resource: "*"
          -
            Effect: "Allow"
            Action: "ssm:PutParameter"
            Resource: "*"

      Roles:
        -
          Ref: "ArtifactoryEC2Role"
  ArtifactoryEC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "ArtifactoryEC2Role"

  ArtifactoryTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
#      Name: !Sub Artifactory-${Env}-TG
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      HealthCheckPort: '80'
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Port: 8082
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${Env}-VPC

  ArtifactoryASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - ArtifactoryTargetGroup
      - ArtifactoryLaunchTemplate
    Properties:
      AutoScalingGroupName: !Sub Artifactory-${Env}-ASG
      MinSize: "1"
      MaxSize: "1"
      DesiredCapacity: !Ref DesiredInstanceNumber
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref ArtifactoryLaunchTemplate
        Version: !GetAtt ArtifactoryLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref ArtifactoryTargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${Env}-PrivateSubnetA
        - Fn::ImportValue: !Sub ${Env}-PrivateSubnetB
        - Fn::ImportValue: !Sub ${Env}-PrivateSubnetC
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - Key: Env
          Value: !Sub ${Env}
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub Artifactory-ASG-${Env}
          PropagateAtLaunch: "true"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

#  WebServerScaleUpPolicy:
#    Type: AWS::AutoScaling::ScalingPolicy
#    Properties:
#      AdjustmentType: ChangeInCapacity
#      AutoScalingGroupName: !Ref ArtifactoryASG
#      Cooldown: '60'
#      ScalingAdjustment: 1

#  WebServerScaleDownPolicy:
#    Type: AWS::AutoScaling::ScalingPolicy
#    Properties:
#      AdjustmentType: ChangeInCapacity
#      AutoScalingGroupName: !Ref ArtifactoryASG
#      Cooldown: '60'
#      ScalingAdjustment: -1

#  CPUAlarmHigh:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
#      MetricName: CPUUtilization
#      Namespace: AWS/EC2
#      Statistic: Average
#      Period: 300
#      EvaluationPeriods: 2
#      Threshold: 90
#      AlarmActions: [!Ref 'WebServerScaleUpPolicy']
#      Dimensions:
#      - Name: AutoScalingGroupName
#        Value: !Ref 'ArtifactoryASG'
#      ComparisonOperator: GreaterThanThreshold

#  CPUAlarmLow:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
#      MetricName: CPUUtilization
#      Namespace: AWS/EC2
#      Statistic: Average
#      Period: 300
#      EvaluationPeriods: 2
#      Threshold: 70
#      AlarmActions: [!Ref 'WebServerScaleDownPolicy']
#      Dimensions:
#      - Name: AutoScalingGroupName
#        Value: !Ref 'ArtifactoryASG'
#      ComparisonOperator: LessThanThreshold

  BackupS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete

  ArtifactoryDBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: subnet group for Artifactory DB
      SubnetIds:
        - Fn::ImportValue: !Sub ${Env}-PrivateSubnetA
        - Fn::ImportValue: !Sub ${Env}-PrivateSubnetB
        - Fn::ImportValue: !Sub ${Env}-PrivateSubnetC
      Tags:
        -
          Key: Env
          Value: !Sub ${Env}
    Type: "AWS::RDS::DBSubnetGroup"

  ArtifactoryDB:
    Type: 'AWS::RDS::DBInstance'
    DependsOn: ArtifactoryDBSubnetGroup
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      BackupRetentionPeriod: 7
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: MySQL
      EngineVersion: 5.7.31
      MasterUsername: !Sub "{{resolve:ssm:/${Env}/Artifactory/db_user:1}}"
      MasterUserPassword: !Sub "{{resolve:ssm-secure:/${Env}/Artifactory/db_password:1}}"
      StorageEncrypted: False
      DBSubnetGroupName: !Ref ArtifactoryDBSubnetGroup
      VPCSecurityGroups:
        - Fn::ImportValue: !Sub ${Env}-VPC-SG

Outputs:
 ArtifactoryEC2InstanceProfile:
   Description: Artifactory EC2 Instance Profile
   Value: !Ref ArtifactoryEC2InstanceProfile
   Export:
     Name: !Sub ${Env}Artifactory-EC2-Instance-Profile
 ArtifactoryEC2InstanceProfileARN:
   Description: Artifactory EC2 Instance Profile
   Value: !GetAtt ArtifactoryEC2InstanceProfile.Arn
   Export:
     Name: !Sub ${Env}-Artifactory-Instance-Profile-ARN
 ArtifactoryASG:
   Description: Artifactory ASG
   Value: !Ref ArtifactoryASG
   Export:
     Name: !Sub ${Env}-Artifactory-ASG
