AWSTemplateFormatVersion: 2010-09-09
Description: Wordpress blog ec2

Parameters:
  AMIID:
    Type: String
    Default: ami-08f17233ccfd4f850
    Description: AMI ID used for initial deployment
  Env:
    AllowedValues:
      - 'Dev'
      - 'QA'
      - 'Prod'
    Default: 'Dev'
    Description: Environment Type
    Type: String
  DesiredInstanceNumber:
    Type: String
    Default: '1'
    Description: Number of running instances at launch

Resources:
  WordpressLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - LBGroup
      - WordpressEC2InstanceProfile
    Properties:
      LaunchTemplateName: !Sub Wordpress-${Env}-Launch-Template
      LaunchTemplateData:
        InstanceType: t2.micro
        DisableApiTermination: 'true'
        IamInstanceProfile:
          Name: !Ref WordpressEC2InstanceProfile
        ImageId: !Sub ${AMIID}
        SecurityGroupIds:
        - !Ref LBGroup
        - Fn::ImportValue: !Sub ${Env}-VPC-SG
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -ex
            apt-get update -y

            export Env=${Env}
            export API_Key=$(aws ssm get-parameter --name /Platform/Monitoring/API_Key --with-decryption --output text --query Parameter.Value)
            export ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            export IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)

            curl -X POST \
              https://api.cloudradar.io/v1/hosts/ \
              -H "Authorization: Bearer $API_Key" \
              -d '{
              "name":"Wordpress-HA-'$ID'",
              "connect":"'$IP'",
              "description":"Wordpress Host ASG",
              "tags": ["Wordpress Host"],
              "cagent":true,
              "dashboard":true
            }' > /response.json

            HUB_USER=$(jq '.host .uuid' -r /response.json) && echo $HUB_USER
            HUB_URL=$(jq '.host .hub_url' -r /response.json) && echo $HUB_URL
            HUB_PASSWORD=$(jq '.host .hub_password' -r /response.json) && echo $HUB_PASSWORD

            curl -O https://repo.cloudradar.io/pool/utils/c/cloudradar-release/cloudradar-release.deb
            sudo dpkg -i cloudradar-release.deb
            sudo apt-get update
            sudo \
            CAGENT_HUB_URL=$HUB_URL \
            CAGENT_HUB_USER=$HUB_USER \
            CAGENT_HUB_PASSWORD=$HUB_PASSWORD \
            apt-get install cagent

            rm -rf /response.json /cloudradar-release.deb

            if [ "$Env" == "Dev" ]; then
              export FSID=$(aws efs describe-file-systems | jq '.FileSystems[] | select(.Name == "Pegasus-Tech-Wordpress-Dev-EFS")' | jq '. | .FileSystemId' -r )
            elif [ "$Env" == "Prod" ]; then
              export FSID=$(aws efs describe-file-systems | jq '.FileSystems[] | select(.Name == "Pegasus-Tech-Wordpress-Prod-EFS")' | jq '. | .FileSystemId' -r )
            elif [ "$Env" == "QA" ]; then
              export FSID=$(aws efs describe-file-systems | jq '.FileSystems[] | select(.Name == "Pegasus-Tech-Wordpress-QA-EFS")' | jq '. | .FileSystemId' -r )
            else
              echo "Incorrect Env Provided"
              exit 1
            fi

            echo $Env
            echo $FSID

            echo 127.0.0.1 localhost > /etc/hosts
            echo 127.0.0.1 pegasus-technology.co.uk >> /etc/hosts
            echo 127.0.0.1 pegasus-technology.com >> /etc/hosts
            echo 127.0.0.1 homefarmproduce.co.uk >> /etc/hosts
            echo pegasus-technology.co.uk >> /etc/hostname
            echo pegasus-technology.com >> /etc/hostname
            echo homefarmproduce.co.uk >> /etc/hostname
            echo $FSID.efs.eu-west-1.amazonaws.com:/ /efs nfs4 defaults,_netdev 0 0 >> /etc/fstab

            mkdir /efs
            mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport $FSID.efs.eu-west-1.amazonaws.com:/ efs

            cd /
            git clone https://Andyscott1547@bitbucket.org/scottydevops/files.git
            cd files

            cp pegasus-technology-com.conf /etc/apache2/sites-available/
            cp pegasus-technology-co-uk.conf /etc/apache2/sites-available/
            cp homefarmproduce.conf /etc/apache2/sites-available/
            cp -f apache2.conf /etc/apache2/apache2.conf
            rm -rf /files

            a2ensite pegasus-technology-com
            a2ensite pegasus-technology-co-uk
            a2ensite homefarmproduce

            systemctl reload apache2

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource WordpressLaunchTemplate --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WordpressASG --region ${AWS::Region}

    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 30,
                        "totalcpu": false
                      },
                      "disk": {
                        "measurement": [
                          "used_percent",
                          "inodes_free"
                        ],
                        "metrics_collection_interval": 30,
                        "resources": [
                          "*"
                        ]
                      },
                      "diskio": {
                        "measurement": [
                          "io_time"
                        ],
                        "metrics_collection_interval": 30,
                        "resources": [
                          "*"
                        ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 30
                      },
                      "statsd": {
                        "metrics_aggregation_interval": 30,
                        "metrics_collection_interval": 10,
                        "service_address": ":8125"
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ],
                        "metrics_collection_interval": 30
                      }
                    }
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "log_group_name": "/Wordpress-ASG/var/log/cloud-init-output",
                            "file_path": "/var/log/cloud-init-output.log",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "log_group_name": "/Wordpress-ASG/var/log/cfn-init-output",
                            "file_path": "/var/log/cfn-init.log",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "log_group_name": "/Wordpress-ASG/var/log/syslog",
                            "file_path": "/var/log/syslog",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "log_group_name": "/Wordpress-ASG/var/log/apache2/error",
                            "file_path": "/var/log/apache2/error.log",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "log_group_name": "/Wordpress-ASG/var/log/apache2/access",
                            "file_path": "/var/log/apache2/access.log",
                            "log_stream_name": "{instance_id}"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.WordpressLaunchTemplate.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource WordpressLaunchTemplate --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service

  WebGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wordpress Web Traffic
      GroupName: !Sub Wordpress-${Env}-Web-Traffic-SG
      VpcId:
        Fn::ImportValue: !Sub ${Env}-VPC
      Tags:
        - Key: Name
          Value: !Sub Wordpress-${Env}-Web-Traffic-SG
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LBGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: WebGroup
    Properties:
      GroupDescription: Wordpress Traffic from LB
      GroupName: !Sub Wordpress-${Env}-LB-Traffic-SG
      VpcId:
        Fn::ImportValue: !Sub ${Env}-VPC
      Tags:
        - Key: Name
          Value: !Sub Wordpress-${Env}-LB-Traffic-SG
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref WebGroup

  WordpressLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref WebGroup
      Subnets:
        - Fn::ImportValue: !Sub ${Env}-PublicSubnetA
        - Fn::ImportValue: !Sub ${Env}-PublicSubnetB
        - Fn::ImportValue: !Sub ${Env}-PublicSubnetC

#WordpreessSSLCertificate:
#  Type: AWS::CertificateManager::Certificate
#  Properties:
#    DomainName: pegasus-technology.com

  WordpressLoadBalancerListener80:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref WordpressLoadBalancer
      Port: 80
      Protocol: HTTP

  WordpressLoadBalancerListener443:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref WordpressTargetGroup
          Type: forward
      LoadBalancerArn: !Ref WordpressLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:eu-west-1:463261883801:certificate/68336687-0a29-4c6d-a435-cb125df53351

  WordpressEC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${Env}-EC2-Instance-Role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  WordpressEC2RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "WordpressEC2${Env}Policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "kms:Decrypt"
              - "kms:Encrypt"
            Resource: "*"
          -
            Effect: "Allow"
            Action: "rds:DescribeDBInstances"
            Resource: "*"
          -
            Effect: "Allow"
            Action: "elasticfilesystem:DescribeFileSystems"
            Resource: "*"
          -
            Effect: "Allow"
            Action: "ssm:PutParameter"
            Resource: "*"

      Roles:
        -
          Ref: "WordpressEC2Role"
  WordpressEC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "WordpressEC2Role"

  WordpressTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub Wordpress-${Env}-TG
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${Env}-VPC

  WordpressASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - WordpressTargetGroup
      - WordpressLaunchTemplate
    Properties:
      AutoScalingGroupName: !Sub Wordpress-${Env}-ASG
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: !Ref DesiredInstanceNumber
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref WordpressLaunchTemplate
        Version: !GetAtt WordpressLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref WordpressTargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${Env}-PrivateSubnetA
        - Fn::ImportValue: !Sub ${Env}-PrivateSubnetB
        - Fn::ImportValue: !Sub ${Env}-PrivateSubnetC
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - Key: Env
          Value: !Sub ${Env}
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub Wordpress-ASG-${Env}
          PropagateAtLaunch: "true"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WordpressASG
      Cooldown: '60'
      ScalingAdjustment: 1

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WordpressASG
      Cooldown: '60'
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions: [!Ref 'WebServerScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WordpressASG'
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions: [!Ref 'WebServerScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WordpressASG'
      ComparisonOperator: LessThanThreshold

Outputs:
 WordpressEC2InstanceProfile:
   Description: Wordpress EC2 Instance Profile
   Value: !Ref WordpressEC2InstanceProfile
   Export:
     Name: !Sub ${Env}Wordpress-EC2-Instance-Profile
 WordpressEC2InstanceProfileARN:
   Description: Wordpress EC2 Instance Profile
   Value: !GetAtt WordpressEC2InstanceProfile.Arn
   Export:
     Name: !Sub ${Env}-Wordpress-Instance-Profile-ARN
 WordpressASG:
   Description: Wordpress ASG
   Value: !Ref WordpressASG
   Export:
     Name: !Sub ${Env}-Wordpress-ASG
