AWSTemplateFormatVersion: 2010-09-09
Description: Creates VPC

Parameters:
  Env:
    AllowedValues:
      - 'Dev'
      - 'QA'
      - 'Prod'
    Default: 'Dev'
    Description: Environment Type
    Type: String

  Contact:
    Type: String
    Default: andy.scott@pegasus-technology.co.uk
    Description: Contact details for owner of this service

  AMIID:
    Type: String
    Default: ami-08f17233ccfd4f850
    Description: AMI ID used for initial deployment

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Mappings:
  Environments:
    Dev:
      VPCCIDR: 10.10.0.0/16
      PrivateSubnetA: 10.10.1.0/24
      PrivateSubnetB: 10.10.2.0/24
      PrivateSubnetC: 10.10.3.0/24
      PublicSubnetA: 10.10.4.0/24
      PublicSubnetB: 10.10.5.0/24
      PublicSubnetC: 10.10.6.0/24
    QA:
      VPCCIDR: 10.20.0.0/16
      PrivateSubnetA: 10.20.1.0/24
      PrivateSubnetB: 10.20.2.0/24
      PrivateSubnetC: 10.20.3.0/24
      PublicSubnetA: 10.20.4.0/24
      PublicSubnetB: 10.20.5.0/24
      PublicSubnetC: 10.20.6.0/24
    Prod:
      VPCCIDR: 10.30.0.0/16
      PrivateSubnetA: 10.30.1.0/24
      PrivateSubnetB: 10.30.2.0/24
      PrivateSubnetC: 10.30.3.0/24
      PublicSubnetA: 10.30.4.0/24
      PublicSubnetB: 10.30.5.0/24
      PublicSubnetC: 10.30.6.0/24

# Creates VPC
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [Environments, !Ref Env, VPCCIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Sub ${Env}-VPC
      - Key: Env
        Value: !Sub ${Env}
      - Key: Contact
        Value: !Sub ${Contact}
# Creates and attaches IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
# Creates 3 Public subnets with public IPs
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [Environments, !Ref Env, PublicSubnetA]
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${Env}-Public-A
      - Key: Env
        Value: !Sub ${Env}
      - Key: Contact
        Value: !Sub ${Contact}
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [Environments, !Ref Env, PublicSubnetB]
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${Env}-Public-B
      - Key: Env
        Value: !Sub ${Env}
      - Key: Contact
        Value: !Sub ${Contact}
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [Environments, !Ref Env, PublicSubnetC]
      AvailabilityZone: !Select [ 2, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${Env}-Public-C
      - Key: Env
        Value: !Sub ${Env}
      - Key: Contact
        Value: !Sub ${Contact}
# Creates public route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${Env}-Public-Route-Table
      - Key: Env
        Value: !Sub ${Env}
      - Key: Contact
        Value: !Sub ${Contact}
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
# Asspociates public subnets to route table
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
# Creates a NAT Gateway
  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
     AllocationId: !GetAtt ElasticIPAddress.AllocationId
     SubnetId: !Ref PublicSubnetA
     Tags:
     - Key: Name
       Value: !Sub NAT-${Env}
     - Key: Env
       Value: !Sub ${Env}
     - Key: Contact
       Value: !Sub ${Contact}
  ElasticIPAddress:
   Type: AWS::EC2::EIP
   Properties:
     Domain: VPC
# Creates 3 private subnets
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [Environments, !Ref Env, PrivateSubnetA]
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${Env}-Private-A
      - Key: Env
        Value: !Sub ${Env}
      - Key: Contact
        Value: !Sub ${Contact}
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [Environments, !Ref Env, PrivateSubnetB]
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${Env}-Private-B
      - Key: Env
        Value: !Sub ${Env}
      - Key: Contact
        Value: !Sub ${Contact}
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [Environments, !Ref Env, PrivateSubnetC]
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${Env}-Private-C
      - Key: Env
        Value: !Sub ${Env}
      - Key: Contact
        Value: !Sub ${Contact}
# Creates private route table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: NATGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${Env}-Private-Route-Table
      - Key: Env
        Value: !Sub ${Env}
      - Key: Contact
        Value: !Sub ${Contact}
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: PrivateRouteTable
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

# Asspociates private subnets to route table
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable

  IntraVPCGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC Access
      GroupName: !Sub ${Env}-VPC-Traffic-SG
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${Env}-VPC-Traffic-SG"
        - Key: Env
          Value: !Sub ${Env}
        - Key: Contact
          Value: !Sub ${Contact}
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other hosts in the same security group
      GroupId: !Ref IntraVPCGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref IntraVPCGroup

  FlowLogs:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      ResourceType: VPC
      ResourceId: !Ref VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Sub /${Env}-VPC/FlowLogs
      DeliverLogsPermissionArn: !GetAtt IamRoleForFlowLogs.Arn
      Tags:
        -
          Key: Name
          Value: !Sub ${Env}-FlowLog
  FlowLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub /${Env}-VPC/FlowLogs
  IamRoleForFlowLogs:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Env}-FlowLogs-Role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: allow-access-to-cw-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: '*'

  SSHGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Bastion Host SSH Traffic
      GroupName: !Sub BastionHost-${Env}-SSH-Traffic-SG
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub BastionHost-${Env}-SSH-Traffic-SG
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  BastionHostEC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${Env}-BastionHost-Instance-Role-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  BastionHostEC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "BastionHostEC2Role"


  BastionHostLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - IntraVPCGroup
      - SSHGroup
      - BastionHostEC2InstanceProfile
    Properties:
      LaunchTemplateName: !Sub BastionHost-${Env}-Launch-Template
      LaunchTemplateData:
        InstanceType: t2.nano
        DisableApiTermination: 'true'
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref BastionHostEC2InstanceProfile
        ImageId: !Ref AMIID
        SecurityGroupIds:
        - !Ref IntraVPCGroup
        - !Ref SSHGroup
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -ex
            export API_Key=$(aws ssm get-parameter --name /Platform/Monitoring/API_Key --with-decryption --output text --query Parameter.Value)

            apt-get update -y
            curl -L -O https://github.com/cloudradar-monitoring/frontman/releases/download/1.6.0/frontman_1.6.0_linux_amd64.deb
            sudo \
            FRONTMAN_HUB_URL=https://hub.cloudradar.io/checks/ \
            FRONTMAN_HUB_USER=690db318-cb71-4ea2-9879-52d3153f2094 \
            FRONTMAN_HUB_PASSWORD=lXWiVCIjgZ9Q \
            dpkg -i frontman_1.6.0_linux_amd64.deb

            export ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            export IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)

            curl -X POST \
              https://api.cloudradar.io/v1/hosts/ \
              -H "Authorization: Bearer $API_Key" \
              -d '{
              "name":"BastionHost-'$ID'",
              "connect":"'$IP'",
              "description":"Bastion Host ASG",
              "tags": ["Bastion Host"],
              "cagent":true,
              "dashboard":true
            }' > /response.json

            HUB_USER=$(jq '.host .uuid' -r /response.json) && echo $HUB_USER
            HUB_URL=$(jq '.host .hub_url' -r /response.json) && echo $HUB_URL
            HUB_PASSWORD=$(jq '.host .hub_password' -r /response.json) && echo $HUB_PASSWORD

            curl -O https://repo.cloudradar.io/pool/utils/c/cloudradar-release/cloudradar-release.deb
            sudo dpkg -i cloudradar-release.deb
            sudo apt-get update
            sudo \
            CAGENT_HUB_URL=$HUB_URL \
            CAGENT_HUB_USER=$HUB_USER \
            CAGENT_HUB_PASSWORD=$HUB_PASSWORD \
            apt-get install cagent

            rm -rf /response.json /cloudradar-release.deb /frontman_1.6.0_linux_amd64.deb

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource BastionHostLaunchTemplate --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BastionHostASG --region ${AWS::Region}

    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 30,
                        "totalcpu": false
                      },
                      "disk": {
                        "measurement": [
                          "used_percent",
                          "inodes_free"
                        ],
                        "metrics_collection_interval": 30,
                        "resources": [
                          "*"
                        ]
                      },
                      "diskio": {
                        "measurement": [
                          "io_time"
                        ],
                        "metrics_collection_interval": 30,
                        "resources": [
                          "*"
                        ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 30
                      },
                      "statsd": {
                        "metrics_aggregation_interval": 30,
                        "metrics_collection_interval": 10,
                        "service_address": ":8125"
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ],
                        "metrics_collection_interval": 30
                      }
                    }
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "log_group_name": "/BastionHost-ASG/var/log/cloud-init-output",
                            "file_path": "/var/log/cloud-init-output.log",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "log_group_name": "/BastionHost-ASG/var/log/cfn-init-output",
                            "file_path": "/var/log/cfn-init.log",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "log_group_name": "/BastionHost-ASG/var/log/syslog",
                            "file_path": "/var/log/syslog",
                            "log_stream_name": "{instance_id}"
                          }
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.BastionHostLaunchTemplate.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource BastionHostLaunchTemplate --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service

  BastionHostASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - BastionHostEC2Role
      - PublicSubnetA
      - PublicSubnetB
      - PublicSubnetC
      - BastionHostLaunchTemplate
    Properties:
      AutoScalingGroupName: !Sub BastionHost-${Env}-ASG
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "1"
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref BastionHostLaunchTemplate
        Version: !GetAtt BastionHostLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - Key: Env
          Value: !Sub ${Env}
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub BastionHost-ASG-${Env}
          PropagateAtLaunch: "true"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true


Outputs:
 VPC:
   Description: VPC of the base network
   Value: !Ref VPC
   Export:
     Name: !Sub ${Env}-VPC
 PublicSubnetA:
   Description: First Public Subnet
   Value: !Ref PublicSubnetA
   Export:
     Name: !Sub ${Env}-PublicSubnetA
 PublicSubnetB:
   Description: Second Public Subnet
   Value: !Ref PublicSubnetB
   Export:
     Name: !Sub ${Env}-PublicSubnetB
 PublicSubnetC:
   Description: Third Public Subnet
   Value: !Ref PublicSubnetC
   Export:
     Name: !Sub ${Env}-PublicSubnetC
 PrivateSubnetA:
   Description: First Private Subnet
   Value: !Ref PrivateSubnetA
   Export:
     Name: !Sub ${Env}-PrivateSubnetA
 PrivateSubnetB:
   Description: Second Private Subnet
   Value: !Ref PrivateSubnetB
   Export:
     Name: !Sub ${Env}-PrivateSubnetB
 PrivateSubnetC:
   Description: Third Private Subnet
   Value: !Ref PrivateSubnetC
   Export:
     Name: !Sub ${Env}-PrivateSubnetC
 IntraVPCGroup:
   Description: Intra VPC Traffic SG
   Value: !Ref IntraVPCGroup
   Export:
     Name: !Sub ${Env}-VPC-SG
